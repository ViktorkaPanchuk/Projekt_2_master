# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'wtyczka1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from qgis.PyQt.QtWidgets import QComboBox, QLabel, QPushButton, QCheckBox
#from qgis.core import QgsVectorLayer, QgsPoint, QgsGeometry, QgsMessageLog
from qgis.utils import iface


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(569, 427)
        self.WyborWarstwyComboBox = QtWidgets.QComboBox(Dialog)
        self.WyborWarstwyComboBox.setGeometry(QtCore.QRect(120, 30, 351, 41))
        self.WyborWarstwyComboBox.setObjectName("WyborWarstwyComboBox")
        self.calculateHeightButton = QtWidgets.QPushButton(Dialog)
        self.calculateHeightButton.setGeometry(QtCore.QRect(370, 80, 101, 31))
        self.calculateHeightButton.setObjectName("calculateHeightButton")
        self.WysokoscWynik = QtWidgets.QLabel(Dialog)
        self.WysokoscWynik.setGeometry(QtCore.QRect(160, 110, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.WysokoscWynik.setFont(font)
        self.WysokoscWynik.setObjectName("WysokoscWynik")
        self.ZaznaczonePunkty = QtWidgets.QCheckBox(Dialog)
        self.ZaznaczonePunkty.setGeometry(QtCore.QRect(130, 200, 131, 31))
        self.ZaznaczonePunkty.setObjectName("ZaznaczonePunkty")
        self.PoleButton = QtWidgets.QPushButton(Dialog)
        self.PoleButton.setGeometry(QtCore.QRect(370, 240, 101, 31))
        self.PoleButton.setObjectName("PoleButton")
        self.PoleWynik = QtWidgets.QLabel(Dialog)
        self.PoleWynik.setGeometry(QtCore.QRect(170, 290, 251, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.PoleWynik.setFont(font)
        self.PoleWynik.setObjectName("PoleWynik")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.calculateHeightButton.setText(_translate("Dialog", "PushButton"))
        self.WysokoscWynik.setText(_translate("Dialog", "Wysokość punktu:"))
        self.ZaznaczonePunkty.setText(_translate("Dialog", "CheckBox"))
        self.PoleButton.setText(_translate("Dialog", "PushButton"))
        self.PoleWynik.setText(_translate("Dialog", "Wysokość punktu:"))


# od tego momentu

class MyPlugin:
    def __init__(self, iface):
        self.iface = iface
        self.layer = None
        self.points = []

        # Łączenie elementów interfejsu z kodem
        self.WyborWarstwyComboBox = self.iface.mainWindow().findChild(QComboBox, "WyborWarstwyComboBox")
        self.calculateHeightButton = self.iface.mainWindow().findChild(QPushButton, "calculateHeightButton")
        self.WysokoscWynik = self.iface.mainWindow().findChild(QLabel, "WysokoscWynik")
        self.ZaznaczonePunkty = self.iface.mainWindow().findChild(QCheckBox, "ZaznaczonePunkty")
        self.PoleButton = self.iface.mainWindow().findChild(QPushButton, "PoleButton")
        self.PoleWynik = self.iface.mainWindow().findChild(QLabel, "PoleWynik")

        # Podłączenie funkcji obsługujących do sygnałów
        self.WyborWarstwyComboBox.currentIndexChanged.connect(self.onLayerChanged)
        self.calculateHeightButton.clicked.connect(self.calculateHeight)
        self.PoleButton.clicked.connect(self.calculateArea)
        self.ZaznaczonePunkty.stateChanged.connect(self.updatePoints)

    def onLayerChanged(self):
        layer_name = self.WyborWarstwyComboBox.currentText()
        self.layer = QgsVectorLayer(layer_name, "layer_name", "ogr")
        if not self.layer.isValid():
            QgsMessageLog.logMessage("Nieprawidłowa warstwa", "Moja wtyczka")
            return
        self.ZaznaczonePunkty.setChecked(False)
        self.points = []

    def updatePoints(self):
        if self.ZaznaczonePunkty.isChecked():
            self.points = []
            selected_features = self.layer.selectedFeatures()
            if len(selected_features) < 2:
                iface.messageBar().pushMessage("Błąd", "Wybierz co najmniej 2 punkty.", level=Qgis.Critical)
                self.ZaznaczonePunkty.setChecked(False)
                return
            for feature in selected_features:
                point = feature.geometry().asPoint()
                self.points.append(point)

    def calculateHeight(self):
        if len(self.points) < 2: 
            iface.messageBar().pushMessage("Błąd", "Wybierz co najmniej 2 punkty.", level=Qgis.Critical)
            return
        height_diff = self.points[1].z() - self.points[0].z()
        result_text = f"Różnica wysokości między punktami o numerach {self.points[0].id()}, {self.points[1].id()} wynosi: {height_diff} [m]"
        self.WysokoscWynik.setText(result_text)

    def calculateArea(self):
        if len(self.points) < 3:
            iface.messageBar().pushMessage("Błąd", "Wybierz co najmniej 3 punkty.", level=Qgis.Critical)
            return
        polygon = QgsGeometry.fromPolygonXY([self.points])
        area = polygon.area()
        result_text = f"Pole powierzchni figury o wierzchołkach w punktach o numerach: {', '.join([str(point.id()) for point in self.points])} wynosi: {area} [m²]"
        self.PoleWynik.setText(result_text)

# Inicjalizacja wtyczki
my_plugin = MyPlugin(iface)
